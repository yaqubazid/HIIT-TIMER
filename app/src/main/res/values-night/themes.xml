<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Theme.HIITTimer" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Primary brand color. -->
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryVariant">@color/colorPrimaryVariant</item>
        <item name="colorOnPrimary">@color/colorOnPrimary</item>
        <!-- Secondary brand color. -->
        <item name="colorSecondary">@color/colorSecondary</item>
        <item name="colorSecondaryVariant">@color/colorSecondaryVariant</item>
        <item name="colorOnSecondary">@color/colorOnSecondary</item>
        <!-- Status bar color. -->
        <item name="android:statusBarColor">?attr/colorPrimaryVariant</item>
        <!-- Customize your theme here. -->
        <item name="android:colorBackground">@color/backgroundColor</item>
        <item name="android:textColor">@color/textColor</item>
        <!-- Remove app bar shadow -->
        <!-- Icon tint color attribute -->
        <item name="iconTintColor">@color/icon_tint_color</item>
    </style>

    <!-- It's often good practice to define the style in the base values folder and inherit or modify it here if needed -->
    <!-- For this case, inheriting from the base values/themes.xml definition is sufficient -->
    <style name="AlertDialogCustomStyle" parent="ThemeOverlay.MaterialComponents.Dialog.Alert">
        <item name="buttonBarPositiveButtonStyle">@style/AlertDialogCustomButton</item>
        <item name="buttonBarNegativeButtonStyle">@style/AlertDialogCustomButton</item>
    </style>

    <style name="AlertDialogCustomButton" parent="Widget.MaterialComponents.Button.TextButton.Dialog">
        <item name="android:textColor">@color/dialog_button_text_color</item>
    </style>
</resources>